---
globs: backend/**/*Test.kt,frontend/**/*.test.ts,frontend/**/*.spec.ts,backend/**/test/**/*.kt
---

# 测试标准和约定

## 后端测试规范 (Kotlin + JUnit 5)

### 测试组织结构
- 使用 `@Nested` 内部类组织相关测试用例
- 测试类名以 `Test` 结尾
- 测试方法名使用反引号包围的中文描述

```kotlin
class UserServiceTest {
    @Nested
    inner class `用户注册功能` {
        @Test
        fun `正常情况下应该成功创建用户并返回用户信息`() {
            // 测试实现
        }
        
        @Test
        fun `当邮箱已存在时应该抛出异常`() {
            // 测试实现
        }
    }
}
```

### 测试分类
- **正常用例**：验证功能在正常输入下的行为
- **边界用例**：验证边界条件和极限值
- **异常用例**：验证错误处理和异常情况

### 数据库测试
- 使用 `@RDBRollback` 注解自动回滚事务
- 使用 Testcontainers 提供真实的数据库环境
- 测试数据使用 Builder 模式或工厂方法创建

```kotlin
@RDBRollback
@Test
fun `正常情况下应该保存用户到数据库`() {
    // Given
    val user = UserBuilder().withEmail("test@example.com").build()
    
    // When
    val savedUser = userService.save(user)
    
    // Then
    assertThat(savedUser.id).isNotNull()
    assertThat(savedUser.email).isEqualTo("test@example.com")
}
```

### 断言规范
- 每个测试必须包含至少一个断言
- 使用 AssertJ 进行流畅的断言
- 断言失败时提供清晰的错误信息

### Mock 使用
- 优先使用真实对象，必要时才使用 Mock
- 使用 Mockito 或 MockK 进行模拟
- Mock 对象的行为要符合真实对象的契约

## 前端测试规范 (Vitest + Vue Test Utils)

### 测试文件组织
- 单元测试：`*.test.ts` 或 `*.spec.ts`
- 组件测试：与组件文件同目录
- E2E 测试：`e2e/` 目录下

### 组件测试
```typescript
import { mount } from '@vue/test-utils'
import { describe, it, expect } from 'vitest'
import UserCard from '@/components/UserCard.vue'

describe('UserCard', () => {
  it('应该正确显示用户信息', () => {
    const wrapper = mount(UserCard, {
      props: {
        user: { name: '张三', email: 'zhangsan@example.com' }
      }
    })
    
    expect(wrapper.text()).toContain('张三')
    expect(wrapper.text()).toContain('zhangsan@example.com')
  })
})
```

### API 测试
- 使用 Mock Service Worker (MSW) 模拟 API 响应
- 测试不同的响应状态码和错误情况
- 验证请求参数和响应数据格式

### E2E 测试 (Playwright)
- 测试关键用户流程
- 使用页面对象模式组织测试代码
- 测试文件位于 `e2e/` 目录

```typescript
import { test, expect } from '@playwright/test'

test('用户登录流程', async ({ page }) => {
  await page.goto('/login')
  await page.fill('[data-testid="email"]', 'user@example.com')
  await page.fill('[data-testid="password"]', 'password123')
  await page.click('[data-testid="login-button"]')
  
  await expect(page).toHaveURL('/dashboard')
})
```

## 测试数据管理

### 后端测试数据
- 使用 Testcontainers 提供隔离的测试环境
- 测试数据通过代码创建，避免依赖外部文件
- 使用 `@Sql` 注解执行测试前的数据准备

### 前端测试数据
- 使用工厂函数创建测试数据
- Mock 数据保持与真实 API 响应一致
- 避免硬编码测试数据

## 测试覆盖率

### 覆盖率目标
- **单元测试**：核心业务逻辑 > 80%
- **集成测试**：关键流程 > 70%
- **E2E 测试**：主要用户路径 100%

### 覆盖率检查
```bash
# 后端覆盖率
./gradlew test jacocoTestReport

# 前端覆盖率
pnpm test:coverage
```

## 持续集成

### 测试执行策略
- 每次提交都运行单元测试
- Pull Request 运行完整测试套件
- 主分支部署前运行 E2E 测试

### 测试环境
- 使用 Docker 容器提供一致的测试环境
- 数据库和缓存使用 Testcontainers
- 前端测试使用无头浏览器

## 测试最佳实践

### 通用原则
- **FIRST 原则**：Fast, Independent, Repeatable, Self-validating, Timely
- **AAA 模式**：Arrange, Act, Assert
- **单一职责**：每个测试只验证一个行为

### 命名约定
- 测试方法名要清楚描述测试场景
- 使用中文描述提高可读性
- 包含前置条件、操作和期望结果

### 维护性
- 避免测试之间的依赖关系
- 使用辅助方法减少重复代码
- 定期重构测试代码
- 保持测试代码的简洁性

## 常用测试命令

```bash
# 后端测试
./gradlew test                    # 运行所有测试
./gradlew test --tests "ClassName"  # 运行特定测试类
./gradlew test --continuous       # 监听模式

# 前端测试
pnpm test                        # 运行单元测试
pnpm test:e2e                    # 运行 E2E 测试
pnpm test:watch                  # 监听模式
pnpm test:coverage               # 生成覆盖率报告
```
