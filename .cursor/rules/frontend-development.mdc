---
globs: frontend/**/*.vue,frontend/**/*.ts,frontend/**/*.js,frontend/**/*.json,frontend/**/*.css,frontend/**/*.scss,frontend/**/*.sass
---

# 前端开发规范 (Vue 3 + TypeScript)

## 技术要求

- **Node.js 24.5.0+** + **pnpm 10.14.0+**
- **Vue 3** + **TypeScript** 严格模式
- **Vite** 作为构建工具
- **组合式 API** (Composition API) 优先

## 代码规范

### TypeScript 编码风格
- 使用 2 空格缩进
- 组件名使用 PascalCase
- 文件名使用 kebab-case 或 PascalCase
- 变量和函数名使用 camelCase
- 常量使用 UPPER_SNAKE_CASE
- 启用 TypeScript 严格模式

### Vue 组件规范
- 优先使用 `<script setup>` 语法
- 组件文件使用 `.vue` 扩展名
- 组件名必须是多个单词（避免与 HTML 元素冲突）
- Props 定义使用 TypeScript 接口
- 事件使用 `defineEmits` 明确定义

### 文件组织
```
frontend/src/
├── components/       # 可复用组件
├── views/           # 页面视图组件
├── layouts/         # 布局组件
├── pages/           # 路由页面（自动生成路由）
├── api/             # API 客户端
├── store/           # Pinia 状态管理
├── router/          # 路由配置
├── assets/          # 静态资源
├── common/          # 通用工具
└── config/          # 配置文件
```

### 组件命名约定
- **页面组件**：放在 `pages/` 目录，文件名即路由路径
- **视图组件**：以 `View.vue` 结尾，放在 `views/` 目录
- **布局组件**：以 `Layout.vue` 结尾，放在 `layouts/` 目录
- **通用组件**：放在 `components/` 目录，使用 PascalCase

### 状态管理 (Pinia)
- 每个 store 使用 `defineStore` 定义
- Store 名称使用 camelCase
- 使用组合式 API 风格的 store
- 持久化状态使用 `pinia-plugin-persistedstate`

### 样式规范
- 优先使用 UnoCSS 原子类
- 组件特定样式使用 `<style scoped>`
- 全局样式放在 `assets/` 目录
- 支持 Sass/SCSS 预处理器

### API 调用
- 使用自动生成的 API 客户端 ([Api.ts](mdc:frontend/src/__generated/Api.ts))
- API 调用统一通过 `api` 实例
- 错误处理使用统一的拦截器

## UI 框架使用

项目集成了多个 UI 框架，按优先级使用：

1. **Vuetify 3** - 主要 UI 框架
2. **Element Plus** - 表单和数据展示组件
3. **Naive UI** - 补充组件
4. **Quasar** - 移动端适配

### 组件自动导入
- UI 组件无需手动导入，已配置自动导入
- Vue API 和工具函数自动导入
- 自定义组件自动导入（`components/`、`views/`、`layouts/`）

## 路由系统

- 基于文件系统的自动路由生成
- 页面文件放在 `pages/` 目录
- 支持动态路由：`[id].vue`
- 嵌套路由：目录结构对应路由层级
- 路由扩展配置：[extendRoute.ts](mdc:frontend/src/router/extendRoute.ts)

## 开发工具

### 构建和开发
```bash
# 开发环境 (端口 3000)
pnpm dev

# 测试环境 (端口 80)
pnpm test

# 生产构建
pnpm build

# 类型检查
pnpm type-check

# 代码检查和修复
pnpm lint

# 生成 API 客户端
pnpm api
```

### 代码质量
- **ESLint**：代码规范检查
- **Prettier**：代码格式化
- **TypeScript**：类型检查
- **Vue DevTools**：开发调试

## 性能优化

- 组件懒加载：路由级别的代码分割
- 图片压缩：Vite 插件自动处理
- Gzip 压缩：生产环境自动启用
- Tree Shaking：自动移除未使用代码
- 文件名哈希：缓存优化

## 环境配置

- 环境变量文件：`src/config/env/`
- 开发环境：`.env.dev`
- 测试环境：`.env.test`
- 生产环境：`.env.production`

## 最佳实践

- 使用 TypeScript 严格模式
- 组件 Props 必须定义类型
- 避免使用 `any` 类型
- 使用 ESLint 和 Prettier 保持代码一致性
- 组件保持单一职责原则
- 合理使用 Pinia 进行状态管理
