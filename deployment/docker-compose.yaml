services:
  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z-cpuv1
    container_name: ${PROJECT_NAME}_minio
    hostname: minio
    restart: always
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_ADMIN_PORT:-9001}:9001"
    environment:
      TZ: ${TZ}
      MINIO_ROOT_USER: '${MINIO_USER}'
      MINIO_ROOT_PASSWORD: '${MINIO_PASSWORD}'
      MINIO_SERVER_URL: "http://${GLOBAL_IP}:${MINIO_PORT}"
      MINIO_COMPRESS: "on"
      MINIO_COMPRESS_EXTENSIONS: ".pdf,.doc,.docx,.xls,.xlsx,.txt,.log,.csv,.json,.xml,.png,.jpg,.jpeg"
      MINIO_COMPRESS_MIME_TYPES: "application/pdf,application/json,application/xml,image/png,image/jpg,image/jpeg"
    command: server --console-address ':9001' /data
    volumes:
      - ./volumes/minio/data:/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - frontend-network
      - backend-network
  api:
    build:
      context: .
      dockerfile: ./volumes/ms-playwright/Dockerfile
    container_name: ${PROJECT_NAME}_java
    hostname: api
    restart: always
    working_dir: /app
    volumes:
      - ./volumes/java:/app:ro
      - ./.env:/etc/app/.env:ro
      - ./volumes/ms-playwright:/ms-playwright:rw
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    command:
      [
        'java',
        '-jar',
        '/app/libs/${PROJECT_NAME}-${PROJECT_VERSION}.jar',
        '--spring.profiles.active=prod',
        '--add-opens java.base/sun.reflect.annotation=ALL-UNNAMED'
      ]
    ports:
      - "${JAVA_PORT:-8080}:8080"
    env_file:
      - ./.env
    environment:
      TZ: ${TZ}
      JVM_VERSION: '${JVM_V}'
      PLAYWRIGHT_VERSION: '${PLAYWRIGHT_V}'
    networks:
      - frontend-network
      - backend-network
  redis:
    image: redis:8.2.0-alpine3.22
    container_name: ${PROJECT_NAME}_redis
    hostname: redis
    restart: always
    volumes:
      - ./volumes/redis/data:/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    command: [
      "redis-server",
      "--port", "6379",
      "--requirepass", "${REDIS_PASSWORD}",
      "--appendonly", "yes",
      "--appendfsync", "everysec",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "900 1",
      "--save", "300 10",
      "--save", "60 10000"
    ]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - backend-network
  postgres:
    image: postgres:17.6-alpine3.22
    container_name: ${PROJECT_NAME}_postgres
    hostname: postgres
    restart: always
    ports:
      - "${PG_PORT:-5432}:5432"
    environment:
      TZ: ${TZ}
      POSTGRES_DB: '${PG_DB}'
      POSTGRES_USER: '${PG_USER}'
      POSTGRES_PASSWORD: '${PG_PASSWORD}'
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - backend-network
  caddy:
    image: caddy:2.10.0-alpine
    container_name: ${PROJECT_NAME}_caddy
    hostname: caddy
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./volumes/caddy/dist:/srv:ro
      - ./volumes/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    environment:
      TZ: ${TZ}
    networks:
      - frontend-network
      - backend-network

networks:
  frontend-network:
    driver: bridge
    internal: false
  backend-network:
    driver: bridge
    internal: false
