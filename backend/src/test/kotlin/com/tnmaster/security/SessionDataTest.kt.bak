package com.tnmaster.security

import io.github.truenine.composeserver.RefId
import io.github.truenine.composeserver.datetime
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertAll
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue
import java.time.Duration

/**
 * SessionData 单元测试
 *
 * @author TrueNine
 * @since 2025-01-10
 */
class SessionDataTest {

  @Test
  fun `测试会话数据基本功能`() {
    val now = datetime.now()
    val expireTime = now.plusSeconds(3600)
    
    val sessionData = SessionData(
      sessionId = "test-session-123",
      account = "testuser",
      userId = RefId(1),
      deviceId = "test-device",
      loginIpAddr = "127.0.0.1",
      loginTime = now,
      roles = setOf("user", "editor"),
      permissions = setOf("read", "write"),
      expireTime = expireTime
    )

    assertAll(
      { assertFalse(sessionData.isExpired()) },
      { assertTrue(sessionData.getRemainingTime().seconds > 0) },
      { assertTrue(sessionData.hasRole("user")) },
      { assertTrue(sessionData.hasRole("editor")) },
      { assertFalse(sessionData.hasRole("admin")) },
      { assertTrue(sessionData.hasPermission("read")) },
      { assertTrue(sessionData.hasPermission("write")) },
      { assertFalse(sessionData.hasPermission("delete")) }
    )
  }

  @Test
  fun `测试角色检查功能`() {
    val sessionData = createTestSessionData(roles = setOf("admin", "user"))
    
    assertAll(
      { assertTrue(sessionData.hasAnyRole("admin", "guest")) },
      { assertTrue(sessionData.hasAnyRole("user", "guest")) },
      { assertFalse(sessionData.hasAnyRole("guest", "moderator")) },
      { assertTrue(sessionData.hasAllRoles("admin", "user")) },
      { assertFalse(sessionData.hasAllRoles("admin", "guest")) }
    )
  }

  @Test
  fun `测试权限检查功能`() {
    val sessionData = createTestSessionData(permissions = setOf("read", "write", "delete"))
    
    assertAll(
      { assertTrue(sessionData.hasAnyPermission("read", "execute")) },
      { assertTrue(sessionData.hasAnyPermission("write", "execute")) },
      { assertFalse(sessionData.hasAnyPermission("execute", "compile")) },
      { assertTrue(sessionData.hasAllPermissions("read", "write")) },
      { assertFalse(sessionData.hasAllPermissions("read", "execute")) }
    )
  }

  @Test
  fun `测试会话过期检查`() {
    val now = datetime.now()
    val expiredSession = createTestSessionData(expireTime = now.minusSeconds(1))
    val validSession = createTestSessionData(expireTime = now.plusSeconds(3600))
    
    assertAll(
      { assertTrue(expiredSession.isExpired()) },
      { assertFalse(validSession.isExpired()) },
      { assertTrue(expiredSession.getRemainingTime().isNegative) },
      { assertTrue(validSession.getRemainingTime().seconds > 0) }
    )
  }

  private fun createTestSessionData(
    roles: Set<String> = setOf("user"),
    permissions: Set<String> = setOf("read"),
    expireTime: datetime = datetime.now().plusSeconds(3600)
  ): SessionData {
    return SessionData(
      sessionId = "test-session",
      account = "testuser",
      userId = RefId(1),
      deviceId = "test-device",
      loginIpAddr = "127.0.0.1",
      loginTime = datetime.now(),
      roles = roles,
      permissions = permissions,
      expireTime = expireTime
    )
  }
}
